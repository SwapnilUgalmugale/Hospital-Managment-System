{"ast":null,"code":"var _jsxFileName = \"E:\\\\cdac\\\\PROJECT\\\\hospitalmanagementsystem-master\\\\hospitalmanagementsystem-master\\\\Frontend\\\\hmsfront\\\\src\\\\screens\\\\DoctorScreens\\\\DoctorAppointmentScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAppointment } from '../../actions/DoctorAction';\nimport Header from '../../components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DoctorAppointmentScreen = props => {\n  _s();\n\n  const doctor = useSelector(store => store.employeeSignin);\n  const {\n    response\n  } = doctor;\n  const docId = response && response.data && response.data.id;\n  const dispatch = useDispatch();\n  const appointments = useSelector(store => store.appointment);\n  const {\n    error2,\n    response2,\n    loading2\n  } = appointments; // call this only once (when the page has loaded successfully)\n\n  useEffect(() => {\n    dispatch(getAppointment(docId));\n  }, []);\n  useEffect(() => {}, [error2, response2, loading2]);\n\n  const create_med = () => {\n    console.log('pId ' + sessionStorage['patient_id']);\n    props.history.push('/doctor/med_list');\n  };\n\n  const create_test = () => {\n    console.log('pId ' + sessionStorage['patient_id']);\n    props.history.push('/doctor/test_list');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Appointment id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Patient id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Patient name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: response2 && response2.length > 0 && response2.map(appointment => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: appointment.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: appointment.apptDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: appointment.apptPatient.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: appointment.apptPatient.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                class: \"btn btn-success\",\n                onClick: () => {\n                  sessionStorage.setItem('patient_id', appointment.apptPatient.id);\n                  create_med();\n                },\n                children: \"Create Medicine Prescription\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                class: \"btn btn-success\",\n                onClick: () => {\n                  sessionStorage.setItem('patient_id', appointment.apptPatient.id);\n                  create_test();\n                },\n                children: \"Create Test Prescription\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DoctorAppointmentScreen, \"cNKqTebvX214zNMDzXNOzUyJURE=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n\n_c = DoctorAppointmentScreen;\nexport default DoctorAppointmentScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoctorAppointmentScreen\");","map":{"version":3,"sources":["E:/cdac/PROJECT/hospitalmanagementsystem-master/hospitalmanagementsystem-master/Frontend/hmsfront/src/screens/DoctorScreens/DoctorAppointmentScreen.js"],"names":["useEffect","useDispatch","useSelector","getAppointment","Header","DoctorAppointmentScreen","props","doctor","store","employeeSignin","response","docId","data","id","dispatch","appointments","appointment","error2","response2","loading2","create_med","console","log","sessionStorage","history","push","create_test","length","map","apptDate","apptPatient","name","setItem"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getAppointment } from '../../actions/DoctorAction'\nimport Header from '../../components/Header'\n\nconst DoctorAppointmentScreen = (props) => {\n  const doctor = useSelector((store) => store.employeeSignin)\n  const { response } = doctor\n  const docId = response && response.data && response.data.id\n  const dispatch = useDispatch()\n  const appointments = useSelector((store) => store.appointment)\n  const { error2, response2, loading2 } = appointments\n\n  // call this only once (when the page has loaded successfully)\n  useEffect(() => {\n    dispatch(getAppointment(docId))\n  }, [])\n\n  useEffect(() => {}, [error2, response2, loading2])\n  const create_med = () => {\n    console.log('pId ' + sessionStorage['patient_id'])\n    props.history.push('/doctor/med_list')\n  }\n  const create_test = () => {\n    console.log('pId ' + sessionStorage['patient_id'])\n    props.history.push('/doctor/test_list')\n  }\n  return (\n    <div className=\"container\">\n      <Header title=\"Appointments\" />\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Appointment id</th>\n            <th>Date</th>\n            <th>Patient id</th>\n            <th>Patient name</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {response2 &&\n            response2.length > 0 &&\n            response2.map((appointment) => {\n              return (\n                <tr>\n                  <td>{appointment.id}</td>\n                  <td>{appointment.apptDate}</td>\n                  <td>{appointment.apptPatient.id}</td>\n                  <td>{appointment.apptPatient.name}</td>\n                  <td>\n                    <button\n                      class=\"btn btn-success\"\n                      onClick={() => {\n                        sessionStorage.setItem(\n                          'patient_id',\n                          appointment.apptPatient.id\n                        )\n                        create_med()\n                      }}>\n                      Create Medicine Prescription\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      class=\"btn btn-success\"\n                      onClick={() => {\n                        sessionStorage.setItem(\n                          'patient_id',\n                          appointment.apptPatient.id\n                        )\n                        create_test()\n                      }}>\n                      Create Test Prescription\n                    </button>\n                  </td>\n                  <td></td>\n                </tr>\n              )\n            })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default DoctorAppointmentScreen\n"]},"metadata":{},"sourceType":"module"}