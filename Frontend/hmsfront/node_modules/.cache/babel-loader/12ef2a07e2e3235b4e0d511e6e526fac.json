{"ast":null,"code":"import { APPOINTMENT_FETCH_REQUEST, APPOINTMENT_FETCH_SUCCESS, APPOINTMENT_FETCH_FAIL, APPOINTMENT_FETCH_RESET, MEDICINELIST_FETCH_REQUEST, MEDICINELIST_FETCH_SUCCESS, MEDICINELIST_FETCH_FAIL, TESTPRESC_FETCH_REQUEST, TESTPRESC_FETCH_SUCCESS, TESTPRESC_FETCH_FAIL, TESTLIST_FETCH_REQUEST, TESTLIST_FETCH_SUCCESS, TESTLIST_FETCH_FAIL, MEDPRESC_FETCH_REQUEST, MEDPRESC_FETCH_SUCCESS, MEDPRESC_FETCH_FAIL } from \"../constants/DoctorConstants\";\nimport axios from 'axios';\nimport { SPRINGURL } from \"../constants/URLConstants\";\nexport const getAppointment = docId => {\n  return dispatch => {\n    dispatch({\n      type: APPOINTMENT_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const url = SPRINGURL + `/doctor/appointments/${sessionStorage['docId']}`;\n    axios.get(url, header).then(response => {\n      dispatch({\n        type: APPOINTMENT_FETCH_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: APPOINTMENT_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const getMedicines = () => {\n  return dispatch => {\n    dispatch({\n      type: MEDICINELIST_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const url = SPRINGURL + \"/doctor/medicines\";\n    axios.get(url, header).then(response => {\n      dispatch({\n        type: MEDICINELIST_FETCH_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: MEDICINELIST_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const testPresc = tests_id => {\n  return dispatch => {\n    dispatch({\n      type: TESTPRESC_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = {\n      p_id: sessionStorage['patient_id'],\n      tests_id\n    };\n    const url = SPRINGURL + `/doctor/tests/prescription/${sessionStorage['docId']}`;\n    axios.post(url, body, header).then(response => {\n      dispatch({\n        type: TESTPRESC_FETCH_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: TESTPRESC_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const getTests = () => {\n  return dispatch => {\n    dispatch({\n      type: TESTLIST_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const url = SPRINGURL + \"/doctor/tests\";\n    axios.get(url, header).then(response => {\n      dispatch({\n        type: TESTLIST_FETCH_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: TESTLIST_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const medPresc = medicines => {\n  return dispatch => {\n    dispatch({\n      type: MEDPRESC_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = {\n      pId: sessionStorage['patient_id'],\n      medicines\n    };\n    const url = SPRINGURL + `/doctor/medicine/prescription/${sessionStorage['docId']}`;\n    axios.post(url, body, header).then(response => {\n      dispatch({\n        type: MEDPRESC_FETCH_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: MEDPRESC_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};","map":{"version":3,"sources":["E:/cdac/PROJECT/hospitalmanagementsystem-master/hospitalmanagementsystem-master/Frontend/hmsfront/src/actions/DoctorAction.js"],"names":["APPOINTMENT_FETCH_REQUEST","APPOINTMENT_FETCH_SUCCESS","APPOINTMENT_FETCH_FAIL","APPOINTMENT_FETCH_RESET","MEDICINELIST_FETCH_REQUEST","MEDICINELIST_FETCH_SUCCESS","MEDICINELIST_FETCH_FAIL","TESTPRESC_FETCH_REQUEST","TESTPRESC_FETCH_SUCCESS","TESTPRESC_FETCH_FAIL","TESTLIST_FETCH_REQUEST","TESTLIST_FETCH_SUCCESS","TESTLIST_FETCH_FAIL","MEDPRESC_FETCH_REQUEST","MEDPRESC_FETCH_SUCCESS","MEDPRESC_FETCH_FAIL","axios","SPRINGURL","getAppointment","docId","dispatch","type","header","headers","url","sessionStorage","get","then","response","payload","data","catch","error","getMedicines","testPresc","tests_id","body","p_id","post","getTests","medPresc","medicines","pId"],"mappings":"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","sourcesContent":["import {\n  APPOINTMENT_FETCH_REQUEST,\n  APPOINTMENT_FETCH_SUCCESS,\n  APPOINTMENT_FETCH_FAIL ,\n  APPOINTMENT_FETCH_RESET,\n  MEDICINELIST_FETCH_REQUEST,\n  MEDICINELIST_FETCH_SUCCESS,\n  MEDICINELIST_FETCH_FAIL,\n  TESTPRESC_FETCH_REQUEST,\n  TESTPRESC_FETCH_SUCCESS,\n  TESTPRESC_FETCH_FAIL,\n  TESTLIST_FETCH_REQUEST,\n  TESTLIST_FETCH_SUCCESS,\n  TESTLIST_FETCH_FAIL,\n  MEDPRESC_FETCH_REQUEST,\n  MEDPRESC_FETCH_SUCCESS,\n  MEDPRESC_FETCH_FAIL,\n} from \"../constants/DoctorConstants\"\nimport axios from 'axios'\nimport {SPRINGURL} from \"../constants/URLConstants\"\n\nexport const getAppointment = (docId) => {\n \n    return (dispatch) => {\n      dispatch({\n        type: APPOINTMENT_FETCH_REQUEST,\n      })\n  \n      const header = {\n        headers: {\n          'Content-Type': 'application/json',\n          \n        },\n      }\n      \n      const url = SPRINGURL+`/doctor/appointments/${sessionStorage['docId']}`;\n      axios\n        .get(url, header)\n        .then((response) => {\n          dispatch({\n            type: APPOINTMENT_FETCH_SUCCESS,\n            payload: response.data,\n          })\n        })\n        .catch((error) => {\n          dispatch({\n            type: APPOINTMENT_FETCH_FAIL,\n            payload: error,\n          })\n        })\n    }\n  }\n  \n  export const getMedicines = () => {\n    return (dispatch) => {\n      dispatch({\n        type: MEDICINELIST_FETCH_REQUEST,\n      })\n  \n      const header = {\n        headers: {\n          'Content-Type': 'application/json',\n          \n        },\n      }\n      \n      const url = SPRINGURL+\"/doctor/medicines\";\n      axios\n        .get(url, header)\n        .then((response) => {\n          dispatch({\n            type: MEDICINELIST_FETCH_SUCCESS,\n            payload: response.data,\n          })\n        })\n        .catch((error) => {\n          dispatch({\n            type: MEDICINELIST_FETCH_FAIL,\n            payload: error,\n          })\n        })\n    }\n  }\n\n  export const testPresc = (tests_id) => {\n    return (dispatch) => {\n      dispatch({\n        type: TESTPRESC_FETCH_REQUEST,\n      })\n  \n      const header = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n  \n      const body = {\n        p_id:sessionStorage['patient_id'],\n        tests_id\n      }\n      const url = SPRINGURL+`/doctor/tests/prescription/${sessionStorage['docId']}`;\n      axios\n        .post(url, body, header)\n        .then((response) => {\n          dispatch({\n            type: TESTPRESC_FETCH_SUCCESS,\n            payload: response,\n          })\n        })\n        .catch((error) => {\n          dispatch({\n            type: TESTPRESC_FETCH_FAIL,\n            payload: error,\n          })\n        })\n    }\n  }\n\n  export const getTests = () => {\n    return (dispatch) => {\n      dispatch({\n        type: TESTLIST_FETCH_REQUEST,\n      })\n  \n      const header = {\n        headers: {\n          'Content-Type': 'application/json',\n          \n        },\n      }\n      \n      const url = SPRINGURL+\"/doctor/tests\";\n      axios\n        .get(url, header)\n        .then((response) => {\n          dispatch({\n            type: TESTLIST_FETCH_SUCCESS,\n            payload: response.data,\n          })\n        })\n        .catch((error) => {\n          dispatch({\n            type: TESTLIST_FETCH_FAIL,\n            payload: error,\n          })\n        })\n    }\n  }\n\n  export const medPresc = (medicines) => {\n    return (dispatch) => {\n      dispatch({\n        type: MEDPRESC_FETCH_REQUEST,\n      })\n  \n      const header = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n  \n      const body = {\n        pId:sessionStorage['patient_id'],\n        medicines\n      }\n      const url = SPRINGURL+`/doctor/medicine/prescription/${sessionStorage['docId']}`;\n      axios\n        .post(url, body, header)\n        .then((response) => {\n          dispatch({\n            type: MEDPRESC_FETCH_SUCCESS,\n            payload: response,\n          })\n        })\n        .catch((error) => {\n          dispatch({\n            type: MEDPRESC_FETCH_FAIL,\n            payload: error,\n          })\n        })\n    }\n  }"]},"metadata":{},"sourceType":"module"}