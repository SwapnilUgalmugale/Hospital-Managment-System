{"ast":null,"code":"import { PATIENT_SIGNIN_REQUEST, PATIENT_SIGNIN_SUCCESS, PATIENT_SIGNIN_FAIL, PATIENT_SIGNOUT, PATIENT_SIGNUP_REQUEST, PATIENT_SIGNUP_SUCCESS, PATIENT_SIGNUP_FAIL, PATIENT_GET_DOC_REQUEST, PATIENT_GET_DOC_SUCCESS, PATIENT_GET_DOC_FAIL, PATIENT_BOOK_Appointment_REQUEST, PATIENT_BOOK_Appointment_SUCCESS, PATIENT_BOOK_Appointment_FAIL, PATIENT_GET_PROFILE_REQUEST, PATIENT_GET_PROFILE_SUCCESS, PATIENT_GET_PROFILE_FAIL, PATIENT_EDIT_PROFILE_REQUEST, PATIENT_EDIT_PROFILE_SUCCESS, PATIENT_EDIT_PROFILE_FAIL, PATIENT_VIEW_PRESC_REQUEST, PATIENT_VIEW_PRESC_SUCCESS, PATIENT_VIEW_PRESC_FAIL } from '../constants/patientConstants';\nimport axios from 'axios';\nimport { SPRINGURL } from \"../constants/URLConstants\";\nexport const patientSigninAction = (email, password) => {\n  return dispatch => {\n    dispatch({\n      type: PATIENT_SIGNIN_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = {\n      email,\n      password\n    };\n    const url = SPRINGURL + '/patient/login';\n    axios.post(url, body, header).then(response => {\n      dispatch({\n        type: PATIENT_SIGNIN_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: PATIENT_SIGNIN_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const patientSignupAction = (name, gender, email, password) => {\n  return dispatch => {\n    dispatch({\n      type: PATIENT_SIGNUP_REQUEST\n    });\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = {\n      name,\n      gender,\n      email,\n      password\n    };\n    const url = SPRINGURL + '/patient/register';\n    axios.post(url, body, header).then(response => {\n      dispatch({\n        type: PATIENT_SIGNUP_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: PATIENT_SIGNUP_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const patientGetdoctors = () => {\n  return dispatch => {\n    dispatch({\n      type: PATIENT_GET_DOC_REQUEST\n    });\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const url = SPRINGURL + '/patient/bookAppointment';\n    axios.get(url, header).then(response => {\n      dispatch({\n        type: PATIENT_GET_DOC_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: PATIENT_GET_DOC_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const patientBookAppointment = (date, p_id, d_id) => {\n  return dispatch => {\n    dispatch({\n      type: PATIENT_BOOK_Appointment_REQUEST\n    });\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = {\n      apptDate: date,\n      apptPatient: {\n        id: p_id\n      },\n      apptDoctor: {\n        id: d_id\n      }\n    };\n    const url = SPRINGURL + '/patient/bookAppointment';\n    axios.post(url, body, header).then(response => {\n      dispatch({\n        type: PATIENT_BOOK_Appointment_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: PATIENT_BOOK_Appointment_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const patientGetProfileAction = id => {\n  return dispatch => {\n    dispatch({\n      type: PATIENT_GET_PROFILE_REQUEST\n    });\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const url = SPRINGURL + '/patient/editProfile/' + id;\n    axios.get(url, header).then(response => {\n      dispatch({\n        type: PATIENT_GET_PROFILE_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: PATIENT_GET_PROFILE_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const patientEditProfileAction = (name, gender, email, password, city, age, contact, bloodGroup) => {\n  return dispatch => {\n    dispatch({\n      type: PATIENT_EDIT_PROFILE_REQUEST\n    });\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = {\n      name,\n      gender,\n      email,\n      password,\n      city,\n      age,\n      contact,\n      bloodGroup\n    };\n    const url = SPRINGURL + '/patient/editProfile';\n    axios.put(url, body, header).then(response => {\n      dispatch({\n        type: PATIENT_EDIT_PROFILE_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: PATIENT_EDIT_PROFILE_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const patientGetPrescAction = id => {\n  return dispatch => {\n    dispatch({\n      type: PATIENT_VIEW_PRESC_REQUEST\n    });\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const url = SPRINGURL + '/patient/viewPrescription/' + id;\n    axios.get(url, header).then(response => {\n      dispatch({\n        type: PATIENT_VIEW_PRESC_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: PATIENT_VIEW_PRESC_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const patientLogout = () => {\n  return dispatch => {\n    sessionStorage.removeItem('pat_info');\n    sessionStorage.removeItem('isLoggedIn');\n    dispatch({\n      type: PATIENT_SIGNOUT\n    });\n    document.location.href = '/home';\n  };\n};","map":{"version":3,"sources":["E:/cdac/PROJECT/hospitalmanagementsystem-master/hospitalmanagementsystem-master/Frontend/hmsfront/src/actions/patientAction.js"],"names":["PATIENT_SIGNIN_REQUEST","PATIENT_SIGNIN_SUCCESS","PATIENT_SIGNIN_FAIL","PATIENT_SIGNOUT","PATIENT_SIGNUP_REQUEST","PATIENT_SIGNUP_SUCCESS","PATIENT_SIGNUP_FAIL","PATIENT_GET_DOC_REQUEST","PATIENT_GET_DOC_SUCCESS","PATIENT_GET_DOC_FAIL","PATIENT_BOOK_Appointment_REQUEST","PATIENT_BOOK_Appointment_SUCCESS","PATIENT_BOOK_Appointment_FAIL","PATIENT_GET_PROFILE_REQUEST","PATIENT_GET_PROFILE_SUCCESS","PATIENT_GET_PROFILE_FAIL","PATIENT_EDIT_PROFILE_REQUEST","PATIENT_EDIT_PROFILE_SUCCESS","PATIENT_EDIT_PROFILE_FAIL","PATIENT_VIEW_PRESC_REQUEST","PATIENT_VIEW_PRESC_SUCCESS","PATIENT_VIEW_PRESC_FAIL","axios","SPRINGURL","patientSigninAction","email","password","dispatch","type","header","headers","body","url","post","then","response","payload","catch","error","patientSignupAction","name","gender","Headers","patientGetdoctors","get","patientBookAppointment","date","p_id","d_id","apptDate","apptPatient","id","apptDoctor","patientGetProfileAction","patientEditProfileAction","city","age","contact","bloodGroup","put","patientGetPrescAction","patientLogout","sessionStorage","removeItem","document","location","href"],"mappings":"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","sourcesContent":["import {\n  PATIENT_SIGNIN_REQUEST,\n  PATIENT_SIGNIN_SUCCESS,\n  PATIENT_SIGNIN_FAIL,\n  PATIENT_SIGNOUT,\n  PATIENT_SIGNUP_REQUEST,\n  PATIENT_SIGNUP_SUCCESS,\n  PATIENT_SIGNUP_FAIL,\n  PATIENT_GET_DOC_REQUEST,\n  PATIENT_GET_DOC_SUCCESS,\n  PATIENT_GET_DOC_FAIL,\n  PATIENT_BOOK_Appointment_REQUEST,\n  PATIENT_BOOK_Appointment_SUCCESS,\n  PATIENT_BOOK_Appointment_FAIL,\n  PATIENT_GET_PROFILE_REQUEST,\n  PATIENT_GET_PROFILE_SUCCESS,\n  PATIENT_GET_PROFILE_FAIL,\n  PATIENT_EDIT_PROFILE_REQUEST,\n  PATIENT_EDIT_PROFILE_SUCCESS,\n  PATIENT_EDIT_PROFILE_FAIL,\n  PATIENT_VIEW_PRESC_REQUEST,\n  PATIENT_VIEW_PRESC_SUCCESS,\n  PATIENT_VIEW_PRESC_FAIL,\n} from '../constants/patientConstants'\nimport axios from 'axios'\nimport {SPRINGURL} from \"../constants/URLConstants\"\n\nexport const patientSigninAction = (email, password) => {\n\n  return (dispatch) => {\n    dispatch({\n      type: PATIENT_SIGNIN_REQUEST,\n    })\n\n    const header = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n\n    const body = {\n      email,\n      password,\n    }\n    const url = SPRINGURL+'/patient/login'\n\n    axios\n      .post(url, body, header)\n      .then((response) => {\n        dispatch({\n          type: PATIENT_SIGNIN_SUCCESS,\n          payload: response,\n        })\n      })\n      .catch((error) => {\n        dispatch({\n          type: PATIENT_SIGNIN_FAIL,\n          payload: error,\n        })\n      })\n  }\n}\nexport const patientSignupAction = (name, gender, email, password) => {\n  return (dispatch) => {\n    dispatch({\n      type: PATIENT_SIGNUP_REQUEST,\n    })\n\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n\n    const body = {\n      name,\n      gender,\n      email,\n      password,\n    }\n    const url = SPRINGURL+'/patient/register'\n\n    axios\n      .post(url, body, header)\n      .then((response) => {\n        dispatch({\n          type: PATIENT_SIGNUP_SUCCESS,\n          payload: response,\n        })\n      })\n      .catch((error) => {\n        dispatch({\n          type: PATIENT_SIGNUP_FAIL,\n          payload: error,\n        })\n      })\n  }\n}\nexport const patientGetdoctors = () => {\n  return (dispatch) => {\n    dispatch({\n      type: PATIENT_GET_DOC_REQUEST,\n    })\n\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n    const url = SPRINGURL+'/patient/bookAppointment'\n\n    axios\n      .get(url, header)\n      .then((response) => {\n        dispatch({\n          type: PATIENT_GET_DOC_SUCCESS,\n          payload: response,\n        })\n      })\n      .catch((error) => {\n        dispatch({\n          type: PATIENT_GET_DOC_FAIL,\n          payload: error,\n        })\n      })\n  }\n}\nexport const patientBookAppointment = (date, p_id, d_id) => {\n  return (dispatch) => {\n    dispatch({\n      type: PATIENT_BOOK_Appointment_REQUEST,\n    })\n\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n    const body = {\n      apptDate: date,\n      apptPatient: {\n        id: p_id,\n      },\n      apptDoctor: {\n        id: d_id,\n      },\n    }\n\n    const url = SPRINGURL+'/patient/bookAppointment'\n\n    axios\n      .post(url, body, header)\n      .then((response) => {\n        dispatch({\n          type: PATIENT_BOOK_Appointment_SUCCESS,\n          payload: response,\n        })\n      })\n      .catch((error) => {\n        dispatch({\n          type: PATIENT_BOOK_Appointment_FAIL,\n          payload: error,\n        })\n      })\n  }\n}\n\nexport const patientGetProfileAction = (id) => {\n  return (dispatch) => {\n    dispatch({\n      type: PATIENT_GET_PROFILE_REQUEST,\n    })\n\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n    const url = SPRINGURL+'/patient/editProfile/' + id\n\n    axios\n      .get(url, header)\n      .then((response) => {\n        dispatch({\n          type: PATIENT_GET_PROFILE_SUCCESS,\n          payload: response,\n        })\n      })\n      .catch((error) => {\n        dispatch({\n          type: PATIENT_GET_PROFILE_FAIL,\n          payload: error,\n        })\n      })\n  }\n}\n\nexport const patientEditProfileAction = (\n  name,gender,email,password,city,age,contact,bloodGroup) => {\n  return (dispatch) => {\n    dispatch({\n      type: PATIENT_EDIT_PROFILE_REQUEST,\n    })\n\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n    const body = {name,gender,email,password,city,age,contact,bloodGroup}\n\n    const url = SPRINGURL+'/patient/editProfile'\n\n    axios\n      .put(url, body, header)\n      .then((response) => {\n        dispatch({\n          type: PATIENT_EDIT_PROFILE_SUCCESS,\n          payload: response,\n        })\n      })\n      .catch((error) => {\n        dispatch({\n          type: PATIENT_EDIT_PROFILE_FAIL,\n          payload: error,\n        })\n      })\n  }\n}\n\nexport const patientGetPrescAction = (id) => {\n  return (dispatch) => {\n    dispatch({\n      type: PATIENT_VIEW_PRESC_REQUEST,\n    })\n\n    const header = {\n      Headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n    const url = SPRINGURL+'/patient/viewPrescription/' + id\n\n    axios\n      .get(url, header)\n      .then((response) => {\n        dispatch({\n          type: PATIENT_VIEW_PRESC_SUCCESS,\n          payload: response,\n        })\n      })\n      .catch((error) => {\n        dispatch({\n          type: PATIENT_VIEW_PRESC_FAIL,\n          payload: error,\n        })\n      })\n  }\n}\n\nexport const patientLogout = () => {\n  return (dispatch) => {\n    sessionStorage.removeItem('pat_info')    \n    sessionStorage.removeItem('isLoggedIn')\n    dispatch({ type: PATIENT_SIGNOUT })\n    document.location.href = '/home'\n  }\n}"]},"metadata":{},"sourceType":"module"}