{"ast":null,"code":"var _jsxFileName = \"E:\\\\cdac\\\\PROJECT\\\\hospitalmanagementsystem-master\\\\hospitalmanagementsystem-master\\\\Frontend\\\\hmsfront\\\\src\\\\screens\\\\PatientScreens\\\\BookAppointmentScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { patientGetdoctors, patientBookAppointment } from \"../../actions/patientAction\";\nimport Header from \"../../components/Header\";\nimport PatientNavBar from \"../../components/PatientNavBar\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { appointmentPaymentAction } from \"../../actions/PaymentAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookAppointmentScreen = props => {\n  _s();\n\n  const user = JSON.parse(sessionStorage.getItem(\"pat_info\"));\n  const [doctor, setDoctor] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const dispatch = useDispatch(); // const user = useSelector((store) => store.patientSignin.response.data)\n\n  const doctors = useSelector(store => store.patientGetDoc);\n  const {\n    error,\n    response,\n    loading\n  } = doctors;\n  const bookAppointment = useSelector(store => store.patientBookAppointment);\n  const {\n    berror,\n    bloading,\n    bresponse\n  } = bookAppointment;\n  const paymentDetails = useSelector(store => store.paymentDetails);\n  const {\n    perror,\n    ploading,\n    presponse\n  } = paymentDetails;\n  useEffect(() => {\n    dispatch(patientGetdoctors());\n  }, []);\n\n  const onToken = token => {\n    console.log(token); // TODO: Send the token information and any other\n    // relevant information to your payment process\n    // server, wait for the response, and update the UI\n    // accordingly. How this is done is up to you. Using\n    // XHR, fetch, or a GraphQL mutation is typical.\n\n    dispatch(appointmentPaymentAction(user.email, token.id, 300));\n  };\n\n  useEffect(() => {\n    if (presponse && presponse.status == \"200\") {\n      dispatch(patientBookAppointment(date, user.id, doctor));\n    } else if (presponse && presponse.status == \"error\") {\n      alert(presponse.error);\n    } else if (perror) {\n      alert(perror);\n    }\n  }, [perror, ploading, presponse]);\n  useEffect(() => {\n    if (bresponse && bresponse.status == \"200\") {\n      alert(\"appointment booked successfully\");\n      props.history.push(\"/patientHome\");\n    } else if (bresponse && bresponse.status == \"error\") {\n      alert(bresponse.error);\n    } else if (berror) {\n      alert(berror);\n    }\n  }, [berror, bloading, bresponse]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PatientNavBar, {\n      name: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center-align fadeInDown\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-center\",\n        children: \"Book Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form box-shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Select Doctor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => {\n              setDoctor(e.target.value);\n            },\n            className: \"form-select\",\n            \"aria-label\": \"Default select example\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              selected: true,\n              children: \"Select Doctor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this), response && response.data.map(doc => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: doc.id,\n              children: doc.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          onClick: () => {\n            document.getElementById('calender').click();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Appointment Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => {\n              setDate(e.target.value);\n            },\n            type: \"date\",\n            id: \"\",\n            className: \"form-control\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(StripeCheckout, {\n          stripeKey: \"pk_test_51IH49aL4tlyYStR0PBlw9PW5vQGgaIhuGy61N9FBDlDK5bEDbDx7fJvrwE8C45QyHH9A5h4IIuuc4tiyGgcIyUjR00N9lXSPrP\",\n          token: onToken,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-lg btn-block\",\n            children: \"Pay and Book\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: \"waiting for response\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookAppointmentScreen, \"a1Lja7W8R9e0THDxeoV06Z1GR2w=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = BookAppointmentScreen;\nexport default BookAppointmentScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookAppointmentScreen\");","map":{"version":3,"sources":["E:/cdac/PROJECT/hospitalmanagementsystem-master/hospitalmanagementsystem-master/Frontend/hmsfront/src/screens/PatientScreens/BookAppointmentScreen.js"],"names":["useEffect","useState","useDispatch","useSelector","patientGetdoctors","patientBookAppointment","Header","PatientNavBar","StripeCheckout","appointmentPaymentAction","BookAppointmentScreen","props","user","JSON","parse","sessionStorage","getItem","doctor","setDoctor","date","setDate","dispatch","doctors","store","patientGetDoc","error","response","loading","bookAppointment","berror","bloading","bresponse","paymentDetails","perror","ploading","presponse","onToken","token","console","log","email","id","status","alert","history","push","name","e","target","value","data","map","doc","document","getElementById","click"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  patientGetdoctors,\n  patientBookAppointment,\n} from \"../../actions/patientAction\";\nimport Header from \"../../components/Header\";\nimport PatientNavBar from \"../../components/PatientNavBar\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { appointmentPaymentAction } from \"../../actions/PaymentAction\";\n\nconst BookAppointmentScreen = (props) => {\n  const user = JSON.parse(sessionStorage.getItem(\"pat_info\"));\n  const [doctor, setDoctor] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n\n  const dispatch = useDispatch();\n  // const user = useSelector((store) => store.patientSignin.response.data)\n  const doctors = useSelector((store) => store.patientGetDoc);\n  const { error, response, loading } = doctors;\n  const bookAppointment = useSelector((store) => store.patientBookAppointment);\n  const { berror, bloading, bresponse } = bookAppointment;\n\n  const paymentDetails = useSelector((store) => store.paymentDetails);\n  const { perror, ploading, presponse } = paymentDetails;\n\n  useEffect(() => {\n    dispatch(patientGetdoctors());\n  }, []);\n\n  const onToken = (token) => {\n    console.log(token);\n    // TODO: Send the token information and any other\n    // relevant information to your payment process\n    // server, wait for the response, and update the UI\n    // accordingly. How this is done is up to you. Using\n    // XHR, fetch, or a GraphQL mutation is typical.\n    dispatch(appointmentPaymentAction(user.email, token.id, 300));\n  };\n\n  useEffect(() => {\n    if (presponse && presponse.status == \"200\") {\n      dispatch(patientBookAppointment(date, user.id, doctor));\n    } else if (presponse && presponse.status == \"error\") {\n      alert(presponse.error);\n    } else if (perror) {\n      alert(perror);\n    }\n  }, [perror, ploading, presponse]);\n\n  useEffect(() => {\n    if (bresponse && bresponse.status == \"200\") {\n      alert(\"appointment booked successfully\");\n      props.history.push(\"/patientHome\");\n    } else if (bresponse && bresponse.status == \"error\") {\n      alert(bresponse.error);\n    } else if (berror) {\n      alert(berror);\n    }\n  }, [berror, bloading, bresponse]);\n\n  return (\n    <div>\n      <PatientNavBar name={user.name} />\n      <div className=\"center-align fadeInDown\">\n        <h3 className=\"text-center\">Book Appointment</h3>\n        <div className=\"form box-shadow\">\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Select Doctor</label>\n            <select\n              onChange={(e) => {\n                setDoctor(e.target.value);\n              }}\n              className=\"form-select\"\n              aria-label=\"Default select example\"\n            >\n              <option selected>Select Doctor</option>\n              {response &&\n                response.data.map((doc) => (\n                  <option value={doc.id}>{doc.name}</option>\n                ))}\n            </select>\n          </div>\n          <div className=\"mb-3\" onClick={()=>{document.getElementById('calender').click()}}>\n            <label className=\"form-label\">Appointment Date</label>\n            <input\n              onChange={(e) => {\n                setDate(e.target.value);\n              }}\n              type=\"date\"\n              id=''\n              className=\"form-control\"\n            />\n          </div>\n        </div>\n        <div className=\"text-center\">\n          <StripeCheckout\n            stripeKey=\"pk_test_51IH49aL4tlyYStR0PBlw9PW5vQGgaIhuGy61N9FBDlDK5bEDbDx7fJvrwE8C45QyHH9A5h4IIuuc4tiyGgcIyUjR00N9lXSPrP\"\n            token={onToken}\n          >\n            <button className=\"btn btn-primary btn-lg btn-block\">\n              Pay and Book\n            </button>\n          </StripeCheckout>\n        </div>\n      </div>\n      {loading && <div className=\"text-center\">waiting for response</div>}\n    </div>\n  );\n};\nexport default BookAppointmentScreen;\n"]},"metadata":{},"sourceType":"module"}