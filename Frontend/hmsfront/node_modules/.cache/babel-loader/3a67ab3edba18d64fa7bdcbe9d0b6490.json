{"ast":null,"code":"import _slicedToArray from\"E:/Project/final-project-online-hospital-management-system/Frontend/hmsfront/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{patientGetdoctors,patientBookAppointment}from\"../../actions/patientAction\";import Header from\"../../components/Header\";import PatientNavBar from\"../../components/PatientNavBar\";import StripeCheckout from\"react-stripe-checkout\";import{appointmentPaymentAction}from\"../../actions/PaymentAction\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var BookAppointmentScreen=function BookAppointmentScreen(props){var user=JSON.parse(sessionStorage.getItem(\"pat_info\"));var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),doctor=_useState2[0],setDoctor=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),date=_useState4[0],setDate=_useState4[1];var dispatch=useDispatch();// const user = useSelector((store) => store.patientSignin.response.data)\nvar doctors=useSelector(function(store){return store.patientGetDoc;});var error=doctors.error,response=doctors.response,loading=doctors.loading;var bookAppointment=useSelector(function(store){return store.patientBookAppointment;});var berror=bookAppointment.berror,bloading=bookAppointment.bloading,bresponse=bookAppointment.bresponse;var paymentDetails=useSelector(function(store){return store.paymentDetails;});var perror=paymentDetails.perror,ploading=paymentDetails.ploading,presponse=paymentDetails.presponse;useEffect(function(){dispatch(patientGetdoctors());},[]);var onToken=function onToken(token){console.log(token);// TODO: Send the token information and any other\n// relevant information to your payment process\n// server, wait for the response, and update the UI\n// accordingly. How this is done is up to you. Using\n// XHR, fetch, or a GraphQL mutation is typical.\ndispatch(appointmentPaymentAction(user.email,token.id,300));};useEffect(function(){if(presponse&&presponse.status==\"200\"){dispatch(patientBookAppointment(date,user.id,doctor));}else if(presponse&&presponse.status==\"error\"){alert(presponse.error);}else if(perror){alert(perror);}},[perror,ploading,presponse]);useEffect(function(){if(bresponse&&bresponse.status==\"200\"){alert(\"appointment booked successfully\");props.history.push(\"/patientHome\");}else if(bresponse&&bresponse.status==\"error\"){alert(bresponse.error);}else if(berror){alert(berror);}},[berror,bloading,bresponse]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(PatientNavBar,{name:user.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"center-align fadeInDown\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-center\",children:\"Book Appointment\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"form box-shadow\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"form-label\",children:\"Select Doctor\"}),/*#__PURE__*/_jsxs(\"select\",{onChange:function onChange(e){setDoctor(e.target.value);},className:\"form-select\",\"aria-label\":\"Default select example\",children:[/*#__PURE__*/_jsx(\"option\",{selected:true,children:\"Select Doctor\"}),response&&response.data.map(function(doc){return/*#__PURE__*/_jsx(\"option\",{value:doc.id,children:doc.name});})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"form-label\",children:\"Appointment Date\"}),/*#__PURE__*/_jsx(\"input\",{onChange:function onChange(e){setDate(e.target.value);},type:\"date\",className:\"form-control\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-center\",children:/*#__PURE__*/_jsx(StripeCheckout,{stripeKey:\"pk_test_51IH49aL4tlyYStR0PBlw9PW5vQGgaIhuGy61N9FBDlDK5bEDbDx7fJvrwE8C45QyHH9A5h4IIuuc4tiyGgcIyUjR00N9lXSPrP\",token:onToken,children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary btn-lg btn-block\",children:\"Pay and Book\"})})})]}),loading&&/*#__PURE__*/_jsx(\"div\",{className:\"text-center\",children:\"waiting for response\"})]});};export default BookAppointmentScreen;","map":{"version":3,"sources":["E:/Project/final-project-online-hospital-management-system/Frontend/hmsfront/src/screens/PatientScreens/BookAppointmentScreen.js"],"names":["useEffect","useState","useDispatch","useSelector","patientGetdoctors","patientBookAppointment","Header","PatientNavBar","StripeCheckout","appointmentPaymentAction","BookAppointmentScreen","props","user","JSON","parse","sessionStorage","getItem","doctor","setDoctor","date","setDate","dispatch","doctors","store","patientGetDoc","error","response","loading","bookAppointment","berror","bloading","bresponse","paymentDetails","perror","ploading","presponse","onToken","token","console","log","email","id","status","alert","history","push","name","e","target","value","data","map","doc"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  patientGetdoctors,\r\n  patientBookAppointment,\r\n} from \"../../actions/patientAction\";\r\nimport Header from \"../../components/Header\";\r\nimport PatientNavBar from \"../../components/PatientNavBar\";\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport { appointmentPaymentAction } from \"../../actions/PaymentAction\";\r\n\r\nconst BookAppointmentScreen = (props) => {\r\n  const user = JSON.parse(sessionStorage.getItem(\"pat_info\"));\r\n  const [doctor, setDoctor] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  // const user = useSelector((store) => store.patientSignin.response.data)\r\n  const doctors = useSelector((store) => store.patientGetDoc);\r\n  const { error, response, loading } = doctors;\r\n  const bookAppointment = useSelector((store) => store.patientBookAppointment);\r\n  const { berror, bloading, bresponse } = bookAppointment;\r\n\r\n  const paymentDetails = useSelector((store) => store.paymentDetails);\r\n  const { perror, ploading, presponse } = paymentDetails;\r\n\r\n  useEffect(() => {\r\n    dispatch(patientGetdoctors());\r\n  }, []);\r\n\r\n  const onToken = (token) => {\r\n    console.log(token);\r\n    // TODO: Send the token information and any other\r\n    // relevant information to your payment process\r\n    // server, wait for the response, and update the UI\r\n    // accordingly. How this is done is up to you. Using\r\n    // XHR, fetch, or a GraphQL mutation is typical.\r\n    dispatch(appointmentPaymentAction(user.email, token.id, 300));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (presponse && presponse.status == \"200\") {\r\n      dispatch(patientBookAppointment(date, user.id, doctor));\r\n    } else if (presponse && presponse.status == \"error\") {\r\n      alert(presponse.error);\r\n    } else if (perror) {\r\n      alert(perror);\r\n    }\r\n  }, [perror, ploading, presponse]);\r\n\r\n  useEffect(() => {\r\n    if (bresponse && bresponse.status == \"200\") {\r\n      alert(\"appointment booked successfully\");\r\n      props.history.push(\"/patientHome\");\r\n    } else if (bresponse && bresponse.status == \"error\") {\r\n      alert(bresponse.error);\r\n    } else if (berror) {\r\n      alert(berror);\r\n    }\r\n  }, [berror, bloading, bresponse]);\r\n\r\n  return (\r\n    <div>\r\n      <PatientNavBar name={user.name} />\r\n      <div className=\"center-align fadeInDown\">\r\n        <h3 className=\"text-center\">Book Appointment</h3>\r\n        <div className=\"form box-shadow\">\r\n          <div className=\"mb-3\">\r\n            <label className=\"form-label\">Select Doctor</label>\r\n            <select\r\n              onChange={(e) => {\r\n                setDoctor(e.target.value);\r\n              }}\r\n              className=\"form-select\"\r\n              aria-label=\"Default select example\"\r\n            >\r\n              <option selected>Select Doctor</option>\r\n              {response &&\r\n                response.data.map((doc) => (\r\n                  <option value={doc.id}>{doc.name}</option>\r\n                ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label className=\"form-label\">Appointment Date</label>\r\n            <input\r\n              onChange={(e) => {\r\n                setDate(e.target.value);\r\n              }}\r\n              type=\"date\"\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <StripeCheckout\r\n            stripeKey=\"pk_test_51IH49aL4tlyYStR0PBlw9PW5vQGgaIhuGy61N9FBDlDK5bEDbDx7fJvrwE8C45QyHH9A5h4IIuuc4tiyGgcIyUjR00N9lXSPrP\"\r\n            token={onToken}\r\n          >\r\n            <button className=\"btn btn-primary btn-lg btn-block\">\r\n              Pay and Book\r\n            </button>\r\n          </StripeCheckout>\r\n        </div>\r\n      </div>\r\n      {loading && <div className=\"text-center\">waiting for response</div>}\r\n    </div>\r\n  );\r\n};\r\nexport default BookAppointmentScreen;\r\n"]},"metadata":{},"sourceType":"module"}