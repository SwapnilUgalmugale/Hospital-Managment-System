{"ast":null,"code":"import { APPOINTMENT_FETCH_REQUEST, APPOINTMENT_FETCH_SUCCESS, APPOINTMENT_FETCH_FAIL, APPOINTMENT_FETCH_RESET, MEDICINELIST_FETCH_REQUEST, MEDICINELIST_FETCH_SUCCESS, MEDICINELIST_FETCH_FAIL, TESTPRESC_FETCH_REQUEST, TESTPRESC_FETCH_SUCCESS, TESTPRESC_FETCH_FAIL, TESTLIST_FETCH_REQUEST, TESTLIST_FETCH_SUCCESS, TESTLIST_FETCH_FAIL, MEDPRESC_FETCH_REQUEST, MEDPRESC_FETCH_SUCCESS, MEDPRESC_FETCH_FAIL } from '../constants/DoctorConstants';\nimport axios from 'axios';\nimport { SPRINGURL } from '../constants/URLConstants';\nexport const getAppointment = docId => {\n  return dispatch => {\n    dispatch({\n      type: APPOINTMENT_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const url = SPRINGURL + `/doctor/appointments/${sessionStorage['docId']}`;\n    axios.get(url, header).then(response => {\n      dispatch({\n        type: APPOINTMENT_FETCH_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: APPOINTMENT_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const getMedicines = () => {\n  return dispatch => {\n    dispatch({\n      type: MEDICINELIST_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const url = SPRINGURL + '/doctor/medicines';\n    axios.get(url, header).then(response => {\n      dispatch({\n        type: MEDICINELIST_FETCH_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: MEDICINELIST_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const testPresc = tests_id => {\n  return dispatch => {\n    dispatch({\n      type: TESTPRESC_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = {\n      p_id: sessionStorage['patient_id'],\n      tests_id\n    };\n    const url = SPRINGURL + `/doctor/tests/prescription/${sessionStorage['docId']}`;\n    axios.post(url, body, header).then(response => {\n      dispatch({\n        type: TESTPRESC_FETCH_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: TESTPRESC_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const getTests = () => {\n  return dispatch => {\n    dispatch({\n      type: TESTLIST_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const url = SPRINGURL + '/doctor/tests';\n    axios.get(url, header).then(response => {\n      dispatch({\n        type: TESTLIST_FETCH_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: TESTLIST_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const medPresc = medicines => {\n  return dispatch => {\n    dispatch({\n      type: MEDPRESC_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = {\n      pId: sessionStorage['patient_id'],\n      medicines\n    };\n    const url = SPRINGURL + `/doctor/medicine/prescription/${sessionStorage['docId']}`;\n    axios.post(url, body, header).then(response => {\n      dispatch({\n        type: MEDPRESC_FETCH_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      dispatch({\n        type: MEDPRESC_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};","map":{"version":3,"sources":["E:/Project/final-project-online-hospital-management-system/Frontend/hmsfront/src/actions/DoctorAction.js"],"names":["APPOINTMENT_FETCH_REQUEST","APPOINTMENT_FETCH_SUCCESS","APPOINTMENT_FETCH_FAIL","APPOINTMENT_FETCH_RESET","MEDICINELIST_FETCH_REQUEST","MEDICINELIST_FETCH_SUCCESS","MEDICINELIST_FETCH_FAIL","TESTPRESC_FETCH_REQUEST","TESTPRESC_FETCH_SUCCESS","TESTPRESC_FETCH_FAIL","TESTLIST_FETCH_REQUEST","TESTLIST_FETCH_SUCCESS","TESTLIST_FETCH_FAIL","MEDPRESC_FETCH_REQUEST","MEDPRESC_FETCH_SUCCESS","MEDPRESC_FETCH_FAIL","axios","SPRINGURL","getAppointment","docId","dispatch","type","header","headers","url","sessionStorage","get","then","response","payload","data","catch","error","getMedicines","testPresc","tests_id","body","p_id","post","getTests","medPresc","medicines","pId"],"mappings":"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","sourcesContent":["import {\r\n  APPOINTMENT_FETCH_REQUEST,\r\n  APPOINTMENT_FETCH_SUCCESS,\r\n  APPOINTMENT_FETCH_FAIL,\r\n  APPOINTMENT_FETCH_RESET,\r\n  MEDICINELIST_FETCH_REQUEST,\r\n  MEDICINELIST_FETCH_SUCCESS,\r\n  MEDICINELIST_FETCH_FAIL,\r\n  TESTPRESC_FETCH_REQUEST,\r\n  TESTPRESC_FETCH_SUCCESS,\r\n  TESTPRESC_FETCH_FAIL,\r\n  TESTLIST_FETCH_REQUEST,\r\n  TESTLIST_FETCH_SUCCESS,\r\n  TESTLIST_FETCH_FAIL,\r\n  MEDPRESC_FETCH_REQUEST,\r\n  MEDPRESC_FETCH_SUCCESS,\r\n  MEDPRESC_FETCH_FAIL,\r\n} from '../constants/DoctorConstants'\r\nimport axios from 'axios'\r\nimport { SPRINGURL } from '../constants/URLConstants'\r\n\r\nexport const getAppointment = (docId) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: APPOINTMENT_FETCH_REQUEST,\r\n    })\r\n\r\n    const header = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const url = SPRINGURL + `/doctor/appointments/${sessionStorage['docId']}`\r\n    axios\r\n      .get(url, header)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: APPOINTMENT_FETCH_SUCCESS,\r\n          payload: response.data,\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: APPOINTMENT_FETCH_FAIL,\r\n          payload: error,\r\n        })\r\n      })\r\n  }\r\n}\r\n\r\nexport const getMedicines = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: MEDICINELIST_FETCH_REQUEST,\r\n    })\r\n\r\n    const header = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const url = SPRINGURL + '/doctor/medicines'\r\n    axios\r\n      .get(url, header)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: MEDICINELIST_FETCH_SUCCESS,\r\n          payload: response.data,\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: MEDICINELIST_FETCH_FAIL,\r\n          payload: error,\r\n        })\r\n      })\r\n  }\r\n}\r\n\r\nexport const testPresc = (tests_id) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: TESTPRESC_FETCH_REQUEST,\r\n    })\r\n\r\n    const header = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const body = {\r\n      p_id: sessionStorage['patient_id'],\r\n      tests_id,\r\n    }\r\n    const url =\r\n      SPRINGURL + `/doctor/tests/prescription/${sessionStorage['docId']}`\r\n    axios\r\n      .post(url, body, header)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: TESTPRESC_FETCH_SUCCESS,\r\n          payload: response,\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: TESTPRESC_FETCH_FAIL,\r\n          payload: error,\r\n        })\r\n      })\r\n  }\r\n}\r\n\r\nexport const getTests = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: TESTLIST_FETCH_REQUEST,\r\n    })\r\n\r\n    const header = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const url = SPRINGURL + '/doctor/tests'\r\n    axios\r\n      .get(url, header)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: TESTLIST_FETCH_SUCCESS,\r\n          payload: response.data,\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: TESTLIST_FETCH_FAIL,\r\n          payload: error,\r\n        })\r\n      })\r\n  }\r\n}\r\n\r\nexport const medPresc = (medicines) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: MEDPRESC_FETCH_REQUEST,\r\n    })\r\n\r\n    const header = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const body = {\r\n      pId: sessionStorage['patient_id'],\r\n      medicines,\r\n    }\r\n    const url =\r\n      SPRINGURL + `/doctor/medicine/prescription/${sessionStorage['docId']}`\r\n    axios\r\n      .post(url, body, header)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: MEDPRESC_FETCH_SUCCESS,\r\n          payload: response,\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: MEDPRESC_FETCH_FAIL,\r\n          payload: error,\r\n        })\r\n      })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}